// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using System.Data;
using Microsoft.EntityFrameworkCore;
using Examination_System.Model.Models;

namespace Examination_System.Models;

public partial class Exam_sysContext : DbContext
{
    public Exam_sysContext()
    {
    }

    public Exam_sysContext(DbContextOptions<Exam_sysContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<Instructor> Instructors { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Question_Bank> Question_Banks { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<Student_Exam> Student_Exams { get; set; }

    public virtual DbSet<Student_answer> Student_answers { get; set; }

    public virtual DbSet<Student_course> Student_courses { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<answer> answers { get; set; }

    public virtual DbSet<course> courses { get; set; }

    public virtual DbSet<course_dept> course_depts { get; set; }
    public virtual DbSet<Branch_Dept> branch_depts { get; set; }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=DESKTOP-T19DKMC\\MSSQLSERVER03;Initial Catalog=Examination_System;Integrated Security=True ;Trust Server Certificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.branch_id).HasName("PK__Branches__E55E37DE0C6F72E1");
            entity.Property(e => e.branch_id).UseIdentityColumn();

           
        });

        modelBuilder.Entity<Comment>(entity =>
        {
            entity.HasKey(e => e.intakeNo).HasName("PK__Comments__0F6969FA8DE558D4");
            entity.Property(e => e.intakeNo).UseIdentityColumn();

            entity.HasOne(d => d.crs).WithMany(p => p.Comments).HasConstraintName("FK__Comments__crsid__5FB337D6");
            entity.HasOne(d => d.std).WithMany(p => p.Comments).HasConstraintName("FK__Comments__stdid__5EBF139D");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.dept_id).HasName("PK__Departme__DCA659745EFD4017");
            entity.Property(e => e.dept_id).UseIdentityColumn();
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.Exid).HasName("PK__Exam__36723235AB8F771D");
            entity.Property(e => e.Exid).UseIdentityColumn();

            entity.HasOne(d => d.crs).WithMany(p => p.Exams).HasConstraintName("FK__Exam__crsid__440B1D61");
            entity.HasOne(d => d.ins).WithMany(p => p.Exams).HasConstraintName("FK__Exam__insid__44FF419A");
        });

        modelBuilder.Entity<Instructor>(entity =>
        {
            entity.HasKey(e => e.insid).HasName("PK__Instruct__116B52F3D65ACC47");
            

            entity.HasOne(d => d.ins).WithOne(p => p.Instructor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Instructo__insid__398D8EEE");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PeriD).HasName("PK__Permissi__49641868BC4F7E2B");
            entity.Property(e => e.PeriD).UseIdentityColumn();

            entity.HasMany(d => d.Roles).WithMany(p => p.Pers)
                .UsingEntity<Dictionary<string, object>>(
                    "Permission_Role",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Permissio__RoleI__6D0D32F4"),
                    l => l.HasOne<Permission>().WithMany()
                        .HasForeignKey("PeriD")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__Permissio__PeriD__6C190EBB"),
                    j =>
                    {
                        j.HasKey("PeriD", "RoleID").HasName("PK__Permissi__F1CBB48B4D1567ED");
                        j.ToTable("Permission_Role");
                    });
        });

        modelBuilder.Entity<Question_Bank>(entity =>
        {
            entity.HasKey(e => e.QID).HasName("PK__Question__CAB147CB08B6EB5D");
            entity.Property(e => e.QID).UseIdentityColumn();

            entity.HasOne(d => d.crs).WithMany(p => p.Question_Banks).HasConstraintName("FK__Question___crsid__4AB81AF0");

            entity.HasMany(d => d.Exams).WithMany(p => p.QIDs)
                .UsingEntity<Dictionary<string, object>>(
                    "question_Exam",
                    r => r.HasOne<Exam>().WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__question___ExamI__4E88ABD4"),
                    l => l.HasOne<Question_Bank>().WithMany()
                        .HasForeignKey("QID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__question_Ex__QID__4D94879B"),
                    j =>
                    {
                        j.HasKey("QID", "ExamId").HasName("PK__question__A82615D759C41BD1");
                        j.ToTable("question_Exam");
                    });
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1AE63B84D8");
            entity.Property(e => e.RoleId).UseIdentityColumn();
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity.HasKey(e => e.stdid).HasName("PK__Student__BA09E293A3A9E8B5");
            

            entity.HasOne(d => d.std).WithOne(p => p.Student)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student__stdid__5441852A");
        });

        modelBuilder.Entity<Student_Exam>(entity =>
        {
            entity.HasKey(e => new { e.stdid, e.ExamId }).HasName("PK__Student___D89EB08F995384E9");

            entity.HasOne(d => d.Exam).WithMany(p => p.Student_Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_E__ExamI__5BE2A6F2");

            entity.HasOne(d => d.std).WithMany(p => p.Student_Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_E__stdid__5AEE82B9");
        });

        modelBuilder.Entity<Student_answer>(entity =>
        {
            entity.HasKey(e => new { e.stdid, e.ansid, e.qid, e.examId }).HasName("PK__Student___2D43AD6563D95B27");

            entity.HasOne(d => d.ans).WithMany(p => p.Student_answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_a__ansid__6383C8BA");

            entity.HasOne(d => d.exam).WithMany(p => p.Student_answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_a__examI__656C112C");

            entity.HasOne(d => d.qidNavigation).WithMany(p => p.Student_answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_ans__qid__6477ECF3");

            entity.HasOne(d => d.std).WithMany(p => p.Student_answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_a__stdid__628FA481");
        });

        modelBuilder.Entity<Student_course>(entity =>
        {
            entity.HasKey(e => new { e.stdid, e.crsid }).HasName("PK__Student___80123E60AADD987E");

            entity.HasOne(d => d.crs).WithMany(p => p.Student_courses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_c__crsid__5812160E");

            entity.HasOne(d => d.std).WithMany(p => p.Student_courses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Student_c__stdid__571DF1D5");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.topicid).HasName("PK__Topics__7C3F7559076BAE60");
            entity.Property(e => e.topicid).UseIdentityColumn();

            entity.HasOne(d => d.crs).WithMany(p => p.Topics).HasConstraintName("FK__Topics__crsid__47DBAE45");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.id).HasName("PK__Users__3213E83F8B9D238A");
            entity.Property(e => e.id).UseIdentityColumn();

            entity.HasOne(d => d.branch).WithMany(p => p.Users).HasConstraintName("FK__Users__branch_id__32E0915F");
            entity.HasOne(d => d.dept).WithMany(p => p.Users).HasConstraintName("FK__Users__dept_id__31EC6D26");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "User_Role",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__User_Role__RoleI__693CA210"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__User_Role__UserI__68487DD7"),
                    j =>
                    {
                        j.HasKey("UserID", "RoleId").HasName("PK__User_Rol__AF27604D4E94EA31");
                        j.ToTable("User_Role");
                    });
        });

        modelBuilder.Entity<answer>(entity =>
        {
            entity.HasKey(e => e.ansid).HasName("PK__answers__2626EE586D8F3B74");
            entity.Property(e => e.ansid).UseIdentityColumn();

            entity.HasOne(d => d.ques).WithMany(p => p.answers).HasConstraintName("FK__answers__quesid__5165187F");
        });

        modelBuilder.Entity<course>(entity =>
        {
            entity.HasKey(e => e.crsid).HasName("PK__courses__A1BDCF3284EBE03C");
            entity.Property(e => e.crsid).UseIdentityColumn();
        });


        modelBuilder.Entity<Branch>()
            .HasOne(b => b.Manager)
            .WithMany(u => u.ManagedBranches)
            .HasForeignKey(b => b.ManagerId)
            .OnDelete(DeleteBehavior.SetNull);

        modelBuilder.Entity<course_dept>(entity =>
        {
            entity.HasKey(e => new { e.crsid, e.dept_id, e.insid, e.branch_id }).HasName("PK__course_d__73989414A190A2A8");

            entity.HasOne(d => d.branch).WithMany(p => p.course_depts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__course_de__branc__412EB0B6");

            entity.HasOne(d => d.crs).WithMany(p => p.course_depts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__course_de__crsid__3E52440B");

            entity.HasOne(d => d.dept).WithMany(p => p.course_depts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__course_de__dept___3F466844");

            entity.HasOne(d => d.ins).WithMany(p => p.course_depts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__course_de__insid__403A8C7D");
        });
        modelBuilder.Entity<Branch_Dept>(entity =>
        {
            entity.HasKey(e => new { e.branch_id, e.dept_id })
                .HasName("PK_Branch_Dept");

            entity.HasOne(d => d.Branch)
                .WithMany(p => p.Branch_Depts)
                .HasForeignKey(d => d.branch_id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Branch_Dept_Branch");

            entity.HasOne(d => d.Department)
                .WithMany(p => p.Branch_Depts)
                .HasForeignKey(d => d.dept_id)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Branch_Dept_Department");

            entity.HasOne(d => d.Manager)
                .WithMany(p => p.ManagedDepartments)
                .HasForeignKey(d => d.ManagerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Branch_Dept_Instructor");
        });



        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    //public virtual int GenerateExam(
    //   string exam_name,
    //   int crs_id,
    //   int ins_id,
    //   int dept_id,
    //   int branch_id,
    //   DateTime start_at,
    //   DateTime end_at,
    //   int duration,
    //   DataTable questions,
    //   DataTable answers)
    //{
    //    // This allows Entity Framework to call your stored procedure
    //    var examIdParam = new SqlParameter("@exam_id", SqlDbType.Int) { Direction = ParameterDirection.Output };

    //    Database.ExecuteSqlRawAsync(
    //        "EXEC GenerateExam " +
    //        "@exam_name, @crs_id, @ins_id, @dept_id, @branch_id, " +
    //        "@start_at, @end_at, @duration, @Questions, @Answers, @exam_id OUTPUT",
    //        new SqlParameter("@exam_name", exam_name),
    //        new SqlParameter("@crs_id", crs_id),
    //        new SqlParameter("@ins_id", ins_id),
    //        new SqlParameter("@dept_id", dept_id),
    //        new SqlParameter("@branch_id", branch_id),
    //        new SqlParameter("@start_at", start_at),
    //        new SqlParameter("@end_at", end_at),
    //        new SqlParameter("@duration", duration),
    //        new SqlParameter("@Questions", questions) { TypeName = "QuestionList" },
    //        new SqlParameter("@Answers", answers) { TypeName = "AnswerList" },
    //        examIdParam);

    //    return (int)examIdParam.Value;
    //}
}